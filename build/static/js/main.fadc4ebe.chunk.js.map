{"version":3,"sources":["components/Start.js","components/Quiz.js","components/Answer.js","Router.js","App.js","serviceWorker.js","index.js"],"names":["Start","className","to","React","Component","Quiz","tickRef","createRef","state","questionsAndAnswers","currentQuestion","currentCorrectAnswer","currentIncorrectAnswers","currentAnswers","turn","score","axios","get","then","res","setState","data","results","console","log","nextRound","array","sort","Math","random","answers_index","this","setTimeout","question","incorrect_answers","correct_answer","shuffle","src","ref","onClick","buttonClicked","window","location","reload","Router","exact","path","component","App","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fadc4ebe.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Start extends React.Component{\r\n\r\n    render(){\r\n        return (\r\n          <div className=\"start-div\">\r\n            <Link to=\"/quiz\">\r\n              <button className=\"start-button\">Start new game</button>\r\n            </Link>\r\n          </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Start","import React, { createRef } from 'react';\r\nimport axios from 'axios';\r\nimport Answer from './Answer';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Quiz extends React.Component{\r\n\r\n\r\n  tickRef = createRef();\r\n\r\n    state = {\r\n        \r\n    questionsAndAnswers: {},\r\n    currentQuestion: 'Loading',\r\n    currentCorrectAnswer: '',\r\n    currentIncorrectAnswers: [],\r\n    currentAnswers: [],\r\n\r\n    turn:-1,\r\n    score: 0\r\n    }\r\n\r\n\r\n\r\n    componentDidMount(){\r\n\r\n        axios\r\n          .get(\"https://opentdb.com/api.php?amount=10\")\r\n          .then((res) => {\r\n            this.setState({\r\n              questionsAndAnswers: res.data.results,\r\n            });\r\n            console.log(this.state.questionsAndAnswers);\r\n            this.nextRound();\r\n          });\r\n\r\n    }\r\n\r\n\r\n     shuffle(array) {\r\n       return (\r\n  array.sort(() => Math.random() - 0.5)\r\n       );\r\n}\r\n\r\nbuttonClicked(answers_index){\r\n\r\n  this.nextRound();\r\n  if(this.state.currentAnswers[answers_index]==this.state.currentCorrectAnswer){\r\n    this.setState({\r\n      score: this.state.score + 1\r\n    });\r\n  }\r\n  \r\n}\r\n\r\n\r\n\r\n\r\n    nextRound(){\r\n      console.log(this.state.score);\r\n\r\n      if(this.state.turn<9){\r\n      \r\n                 this.setState({\r\n                   turn: this.state.turn + 1,\r\n                 });\r\n\r\n                 setTimeout(()=>{\r\n\r\n                  let currentQuestion = this.state.questionsAndAnswers[\r\n                    this.state.turn\r\n                  ].question;\r\n\r\n                  setTimeout(()=>{\r\n\r\n                                     this.setState({\r\n                                       currentQuestion: currentQuestion,\r\n                                       currentIncorrectAnswers: this.state\r\n                                         .questionsAndAnswers[this.state.turn]\r\n                                         .incorrect_answers,\r\n                                       currentCorrectAnswer: this.state\r\n                                         .questionsAndAnswers[this.state.turn]\r\n                                         .correct_answer,\r\n                                     });\r\n\r\n                                     this.setState({\r\n                                       currentAnswers: this.shuffle([\r\n                                         ...this.state.currentIncorrectAnswers,\r\n                                         this.state.currentCorrectAnswer,\r\n                                       ]),\r\n                                     });\r\n\r\n                                     console.log(this.state.currentAnswers);\r\n                                     console.log(this.state.currentQuestion);\r\n                  },25);\r\n \r\n\r\n\r\n                 }, 30);\r\n        \r\n\r\n\r\n        \r\n    \r\n\r\n        \r\n                }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    render(){\r\n        return (\r\n          <div>\r\n\r\n          {this.state.turn<9 && \r\n  <div>\r\n\r\n            <img className='tick' src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/a/ac/Green_tick.svg/1200px-Green_tick.svg.png\" ref={this.tickRef}></img>\r\n            <div className=\"quiz-box\">\r\n              <div className=\"quiz-question\">\r\n                <p className=\"question\">{this.state.currentQuestion}</p>\r\n              </div>\r\n\r\n              <div className=\"quiz-answers\">\r\n                <div className=\"answer\" onClick={() => this.buttonClicked(0)}>\r\n                  <button className=\"letter\">A</button>\r\n                  <p className=\"answer-text\">{this.state.currentAnswers[0]}</p>\r\n                </div>\r\n\r\n                <div className=\"answer\" onClick={() => this.buttonClicked(1)}>\r\n                  <button className=\"letter\">B</button>\r\n                  <p className=\"answer-text\">{this.state.currentAnswers[1]}</p>\r\n                </div>\r\n\r\n                {this.state.currentIncorrectAnswers[2] && (\r\n                  <div className=\"answer\" onClick={() => this.buttonClicked(2)}>\r\n                    <button className=\"letter\">C</button>\r\n                    <p className=\"answer-text\">\r\n                      {this.state.currentAnswers[2]}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n\r\n                {this.state.currentIncorrectAnswers[2] && (\r\n                  <div className=\"answer\" onClick={() => this.buttonClicked(3)}>\r\n                    <button className=\"letter\">D</button>\r\n                    <p className=\"answer-text\">\r\n                      {this.state.currentAnswers[3]}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n                  \r\n                  </div>\r\n                }\r\n\r\n                {this.state.turn>8 &&\r\n      <div>                \r\n                  <p className='end-p'>Fin de la partida. Has acertado {this.state.score} preguntas</p>\r\n                             \r\n              <button className=\"start-button\" onClick={()=>{window.location.reload(false)}}>Start new game</button>\r\n            \r\n            </div>\r\n                }\r\n          </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Quiz;","import React from \"react\";\r\n\r\nexport default class Answer extends React.Component {\r\n  answer;\r\n  isCorrect;\r\n  letter;\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.answer = this.props.answer;\r\n    this.isCorrect = this.props.isCorrect;\r\n    this.letter = this.props.letter;\r\n  }\r\n\r\n  componentDidMount(){\r\n      \r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"answer\">\r\n        <button className=\"letter\">{this.letter}</button>\r\n        <p className=\"answer-text\">{this.answer}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport {Route, BrowserRouter, Switch, Link} from 'react-router-dom';\r\nimport Start from './components/Start';\r\nimport Quiz from './components/Quiz'; \r\n\r\nexport default class Router extends React.Component{\r\n    render(){\r\n\r\n        return(\r\n            <BrowserRouter>\r\n        <Switch>\r\n            <Route exact path='/' component={Start}></Route>\r\n            <Route exact path='/quiz' component={Quiz}></Route>\r\n        </Switch>\r\n            </BrowserRouter>\r\n\r\n        )\r\n    }\r\n}","import React from 'react';\nimport Start from './components/Start';\nimport './App.css';\nimport Quiz from './components/Quiz';\nimport Router from './Router';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router></Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}